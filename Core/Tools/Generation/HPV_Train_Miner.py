from requests import post
from time import sleep, time
from random import randint
from uuid import uuid4
from colorama import Fore
from threading import Lock, Thread
from typing import Literal
from datetime import datetime
from itertools import cycle







class HPV_Train_Miner:
    '''
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è –∏–≥—Ä—ã Train Miner –≤ Hamster Kombat
    ------------------------------------------------------
    [1] - `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID`
    
    [2] - `–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞`
    
    [3] - `–≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞`
    
    [4] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞`
    '''



    def __init__(self, Console_Lock: Lock, _Thread: int, Proxy: dict = None) -> None:
        self.APP_TOKEN = '82647f43-3f87-402d-88dd-09a90025313f'
        self.PROMO_ID = 'c4480ac7-e178-4973-8061-9ed5b2e17954'
        self.Console_Lock = Console_Lock

        self.THREAD = f'–ü–æ—Ç–æ–∫ #{_Thread}' # –ù—É–º–µ—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞
        self.PROXY = Proxy # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.ID = self.HPV_ID() # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
        self.TOKEN = self.HPV_Login() # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ ID



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with self.Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()             # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            _Thread = Fore.MAGENTA + self.THREAD   # –ù—É–º–µ—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞
            Smile = COLOR + str(Smile)             # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text                    # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + _Thread + DIVIDER + Text)



    def HPV_ID(self) -> str:
        '''–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID'''

        return f'{int(time() * 1000)}-{"".join(str(randint(0, 9)) for _ in range(19))}'



    def HPV_Login(self) -> str:
        '''–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞'''

        URL = 'https://api.gamepromo.io/promo/login-client'
        JSON = {'appToken': self.APP_TOKEN, 'clientId': self.ID, 'clientOrigin': 'deviceid'}

        try:
            return post(URL, json=JSON, proxies=self.PROXY).json()['clientToken']
        except:
            return ''



    def HPV_Emulation(self) -> bool:
        '''–≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞'''

        URL = 'https://api.gamepromo.io/promo/register-event'
        HEADERS = {'Authorization': f'Bearer {self.TOKEN}', 'Content-Type': 'application/json'}
        JSON = {'promoId': self.PROMO_ID, 'eventId': str(uuid4()), 'eventOrigin': 'undefined'}

        try:
            sleep(25)
            return post(URL, json=JSON, headers=HEADERS, proxies=self.PROXY).json()['hasCode']
        except:
            return False



    def HPV_Generate_Key(self) -> str:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞'''

        URL = 'https://api.gamepromo.io/promo/create-code'
        HEADERS = {'Authorization': f'Bearer {self.TOKEN}', 'Content-Type': 'application/json'}
        JSON = {'promoId': self.PROMO_ID}

        try:
            return post(URL, json=JSON, headers=HEADERS, proxies=self.PROXY).json()['promoCode']
        except:
            return ''



    def Run(self) -> str:
        '''–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞'''

        if self.TOKEN: # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω
            self.Logging('Success', 'üü¢', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')

            # –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞
            for _ in range(15):
                if self.HPV_Emulation():
                    self.Logging('Success', 'üü¢', '–ö–ª—é—á –≥–æ—Ç–æ–≤!')
                    break
                else:
                    self.Logging('Warning', 'üü°', '–ö–ª—é—á–∏ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤!')

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            KEY = self.HPV_Generate_Key()
            if self.HPV_Generate_Key():
                self.Logging('Success', 'üü£', '–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!')
            return KEY
        else: # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω
            self.Logging('Error', 'üî¥', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞!')
            return None







def _HPV_Train_Miner(Console_Lock, Retry, Proxy) -> dict:
    '''–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è –∏–≥—Ä—ã Train Miner'''

    HPV_Keys = [] # –°–ø–∏—Å–æ–∫ —Ö—Ä–∞–Ω—è—â–∏–π –∫–ª—é—á–∏ –¥–ª—è Train Miner
    Threads = [] # –°–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤

    def HPV_Key_Gen(_Thread, Proxy=None):
        HPV = HPV_Train_Miner(Console_Lock, f'{_Thread} Train', Proxy)
        KEY = HPV.Run()
        HPV_Keys.append(KEY) if KEY else None

    for retry in range(Retry):
        if Proxy:
            Proxy = cycle(Proxy)
            TH = Thread(target=HPV_Key_Gen, args=(retry, next(Proxy)))
        else:
            TH = Thread(target=HPV_Key_Gen, args=(retry,))
        TH.start()
        Threads.append(TH)

    for thread in Threads:
        thread.join()

    return {'Train Miner': HPV_Keys}, True if HPV_Keys else False